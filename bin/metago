#!/usr/bin/env python


import os, sys
import click
import random
import string

from subprocess import call

try:
    from metago.pyflux import FluxWorkflowRunner

    from metago import quality_control
    from metago import assembly
    from metago import binning
except ImportError:
    print 'Loading virtual environment...'
    fp = os.path.dirname(os.path.abspath(__file__)).replace('bin','')
    environment = os.path.join(fp, 'dependencies/miniconda/bin/python')
    call('{} {}'.format(environment, ' '.join(sys.argv)), shell=True)
    sys.exit()


class Runner(FluxWorkflowRunner):
    def __init__(self, cmd, output_dp, max_ppn, max_mem):
        self.cmd = cmd
        self.output_dp = output_dp
        self.max_ppn = max_ppn
        self.max_mem = max_mem

    def workflow(self):
        """ method invoked on class instance run call """
        self.addTask("runner", nCores=self.max_ppn, memMb=self.max_mem, command=self.cmd)


def submit(ctx, cmd):
    r = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))
    log_output_dp = os.path.join(ctx.obj['OUTPUT'], 'logs/runner_{}'.format(r))
    workflow_runner = Runner(cmd=cmd, output_dp=ctx.obj['OUTPUT'], max_ppn=ctx.obj['PPN'], max_mem=ctx.obj['MEM'])
    workflow_runner.run(mode='local', dataDirRoot=log_output_dp, nCores=ctx.obj['PPN'], memMb=ctx.obj['MEM'])


@click.group()
@click.option('--output', '-o', default='metago_output')
@click.option('--flux/--no-flux', default=False)
@click.option('--account', '-a', help='ex. username_fluxod')
@click.option('--ppn', '-p', default=4)
@click.option('--mem', '-m', default='20000', help='current limitation, only handles mb')
@click.option('--walltime', '-w', default='2:00:00', help='must be in format hhh:mm:ss')
@click.option('--queue', '-q', default='fluxod')
@click.option('--email', '-e', default=None)
@click.pass_context
def cli(ctx, output, flux, account, ppn, mem, walltime, queue, email):
    """ Metago Command Line Interface

    Note: Use absolute paths to all files and directories
    """
    if not os.path.exists(output): os.makedirs(output)
    fp = os.path.dirname(os.path.abspath(__file__)).replace('bin','')
    environment = os.path.join(fp, 'dependencies/miniconda/bin/activate')

    subcommand = ctx.invoked_subcommand
    if not subcommand:
        subcommand = 'metago'
     
    if flux:
        if not account: sys.exit('To attempt a submission to the flux cluster you need to supply an --account/-a')
        full_dp = os.path.dirname(os.path.abspath(__file__))
        metago_fp = os.path.join(full_dp, 'metago')
        metago_index = -1
        for i, s in enumerate(sys.argv):
            if 'metago' in s:
                metago_index = i
                break
        cmd = sys.argv
        cmd[metago_index] = metago_fp
        cmd.remove('--flux')
        cmd = ' '.join(cmd)
        if queue == 'fluxod':
            qsub = 'qsub -N {} -A {} -q fluxod -l nodes=1:ppn={}:largemem,mem={}mb,walltime={}'.format(
                                                                   subcommand, account, ppn, mem, walltime)
        else:
            qsub = 'qsub -N {} -A {} -q {} -l nodes=1:ppn={},mem={}mb,walltime={}'.format(
                                                                   subcommand, account, queue, ppn, mem, walltime)
        if email: qsub += ' -M {}'.format(email)
        print qsub
        call('echo "source {} && python {}" | {}'.format(environment, cmd, qsub), shell=True)
        sys.exit('Launched command via Flux')
    ctx.obj['ARGS'] = ' '.join(sys.argv[1:])
    ctx.obj['ENV'] = environment
    ctx.obj['QC'] = os.path.join(fp, 'metago/quality_control.py')
    ctx.obj['ASSEMBLYSCRIPT'] = os.path.join(fp, 'metago/assembly.py')
    ctx.obj['BINNINGSCRIPT'] = os.path.join(fp, 'metago/binning.py')
    ctx.obj['MAPSCRIPT'] = os.path.join(fp, 'metago/read_pileup.py')
    ctx.obj['MINHASHSCRIPT'] = os.path.join(fp, 'metago/minhash.py')
    ctx.obj['PSEUDOALIGNSCRIPT'] = os.path.join(fp, 'metago/pseudoalign.py')
    ctx.obj['SUBSAMPLESCRIPT'] = os.path.join(fp, 'metago/subsample.py')
    ctx.obj['VIRSORTERSCRIPT'] = os.path.join(fp, 'metago/virsorter.py')
    ctx.obj['OUTPUT'] = output
    ctx.obj['FLUX'] = flux
    ctx.obj['ACCOUNT'] = account
    ctx.obj['PPN'] = ppn
    ctx.obj['MEM'] = mem
    ctx.obj['WALLTIME'] = walltime


cli.add_command(quality_control.qc)
cli.add_command(assembly.assembly)
cli.add_command(binning.binning)

@cli.command()
@click.option('--fastqs', '-f', multiple=True)
@click.option('--continue_assembly/--no_continue_assembly', default=False)
@click.pass_context
def co_assembly(ctx, fastqs, continue_assembly):
    """ Assemble run sample reads """
    cmd = 'source {} && python {} -o {} -p {} -m {} co_assembly'.format(ctx.obj['ENVIRONMENT'],
                                                                               ctx.obj['ASSEMBLYSCRIPT'],
                                                                               ctx.obj['OUTPUT'],
                                                                               ctx.obj['PPN'],
                                                                               ctx.obj['MEM'])
    if continue_assembly: cmd += ' --continue_assembly'
    for fastq in fastqs:
        cmd += ' -f {}'.format(fastq)
    submit(ctx=ctx, cmd=cmd)


#@cli.command()
#@click.argument('sample_dp')
#@click.pass_context
#def viral_sample_workflow(ctx, sample_dp):
#    """ Run base viral workflow against run """
#    click.echo('Base viral sample workflow called')
#    result = ctx.invoke(sample_qc, sample_dp=sample_dp)
#    print(result)
#    result = ctx.invoke(sample_assembly, sample_dp=sample_dp)


@cli.command()
@click.argument('run_dp')
@click.option('--num_hashes', '-n')
@click.option('--kmer_length', '-k')
@click.pass_context
def run_minhash(ctx, run_dp, num_hashes, kmer_length):
    """ Minhash compare fastqs in run """
    cmd = 'source {} && python {} -o {} -p {} -m {} run_minhash {}'.format(ctx.obj['ENVIRONMENT'],
                                                                           ctx.obj['MINHASHSCRIPT'],
                                                                           ctx.obj['OUTPUT'],
                                                                           ctx.obj['PPN'],
                                                                           ctx.obj['MEM'],
                                                                           run_dp)
    if num_hashes: cmd += ' --num_hashes={}'.format(num_hashes)
    if kmer_length: cmd += ' --kmer_length={}'.format(kmer_length)
    submit(ctx=ctx, cmd=cmd)




@cli.command()
@click.argument('run_dp')
@click.option('--reference', '-r', required=True)
@click.option('--visualize/--not-visualize', default=False)
@click.option('--paired/--not-paired', default=False)
@click.pass_context
def run_mapping(ctx, run_dp, reference, visualize, paired):
    """ Read mapping of run to reference """
    cmd = 'source {} && python {} -o {} -p {} -m {} run_pileup {} -r {}'.format(ctx.obj['ENVIRONMENT'],
                                                                      ctx.obj['MAPSCRIPT'],
                                                                      ctx.obj['OUTPUT'],
                                                                      ctx.obj['PPN'],
                                                                      ctx.obj['MEM'],
                                                                      run_dp,
                                                                      reference)
    if visualize: cmd += ' --visualize'
    if paired: cmd += ' --paired'
    submit(ctx=ctx, cmd=cmd)


@cli.command()
@click.argument('sample_fp')
@click.option('--reference', '-r', required=True)
@click.option('--visualize/--not-visaulize', default=False)
@click.option('--paired/--not-paired', default=False)
@click.pass_context
def sample_mapping(ctx, sample_fp, reference, visualize, paired):
    """ Read mapping of reference to sample """
    cmd = 'source {} && python {} -o {} -p {} -m {} sample_pileup {} -r {}'.format(ctx.obj['ENVIRONMENT'],
                                                                      ctx.obj['MAPSCRIPT'],
                                                                      ctx.obj['OUTPUT'],
                                                                      ctx.obj['PPN'],
                                                                      ctx.obj['MEM'],
                                                                      sample_fp,
                                                                      reference)
    if visualize: cmd += ' --visualize'
    if paired: cmd += ' --paired'
    submit(ctx=ctx, cmd=cmd)


@cli.command()
@click.argument('run_dp')
@click.option('--reference', '-r', required=True)
@click.option('--paired/--not-paired', default=False)
@click.pass_context
def run_pseudoalign(ctx, run_dp, reference, paired):
    """ Read assignment of run to reference """
    click.echo('Run Mapping called')
    cmd = 'source {} && python {} -o {} -p {} -m {} run_pseudoalign {} -r {}'.format(ctx.obj['ENVIRONMENT'],
                                                                      ctx.obj['PSEUDOALIGNSCRIPT'],
                                                                      ctx.obj['OUTPUT'],
                                                                      ctx.obj['PPN'],
                                                                      ctx.obj['MEM'],
                                                                      run_dp,
                                                                      reference)
    if paired: cmd += ' --paired'
    submit(ctx=ctx, cmd=cmd)


@cli.command()
@click.argument('sample_fp')
@click.option('--reference', '-r', required=True)
@click.option('--paired/--not-paired', default=False)
@click.pass_context
def sample_pseudoalign(ctx, sample_fp, reference, paired):
    """ Read assignment of sample to reference """
    cmd = 'source {} && python {} -o {} -p {} -m {} sample_pseudoalign {} -r {}'.format(ctx.obj['ENVIRONMENT'],
                                                                      ctx.obj['PSEUDOALIGNSCRIPT'],
                                                                      ctx.obj['OUTPUT'],
                                                                      ctx.obj['PPN'],
                                                                      ctx.obj['MEM'],
                                                                      sample_fp,
                                                                      reference)
    if paired: cmd += ' --paired'
    submit(ctx=ctx, cmd=cmd)


@cli.command()
@click.argument('fasta_fp')
@click.pass_context
def virsorter_decontaminate(ctx, fasta_fp):
    """ Viral sequence prediction of contigs """
    cmd = 'source {} && python {} -o {} -p {} -m {} virsorter {}'.format(ctx.obj['ENVIRONMENT'],
                                                                         ctx.obj['VIRSORTERSCRIPT'],
                                                                         ctx.obj['OUTPUT'],
                                                                         ctx.obj['PPN'],
                                                                         ctx.obj['MEM'],
                                                                         fasta_fp)
    submit(ctx=ctx, cmd=cmd)

@cli.command()
@click.argument('fastq_fp')
@click.option('--min_ratio', default=0.1)
@click.option('--max_ratio', default=0.9)
@click.option('--ratio_interval', default=0.1)
@click.pass_context
def subsample(ctx, fastq_fp, min_ratio, max_ratio, ratio_interval):
    """ Subsample fastq at interval over ratio range """
    cmd = 'source {} && python {} -o {} -p {} -m {} subsample {} --min_ratio {} --max_ratio {} --ratio_interval {}'.format(
                                                                         ctx.obj['ENVIRONMENT'],
                                                                         ctx.obj['SUBSAMPLESCRIPT'],
                                                                         ctx.obj['OUTPUT'],
                                                                         ctx.obj['PPN'],
                                                                         ctx.obj['MEM'],
                                                                         fastq_fp, min_ratio, max_ratio, ratio_interval)
    submit(ctx=ctx, cmd=cmd)


if __name__ == "__main__":
    cli(obj={})
